generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id             String              @id @db.Uuid
  username       String              @unique
  bio            String?
  favoriteAnime  String?             @map("favorite_anime")
  avatarUrl      String?             @map("avatar_url")
  createdAt      DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  status         String?
  displayName    String?             @map("display_name")
  activityLogs   ActivityLog[]
  serverMembers  ServerMember[]      @relation("ServerMembership")
  messageLikes   ServerMessageLike[] @relation("ServerMessageLikes")
  serverMessages ServerMessage[]     @relation("ServerMessageAuthor")
  postLikes      ServerPostLike[]    @relation("ServerPostLikes")
  serverPosts    ServerPost[]        @relation("ServerPostAuthor")
  ownedServers   Server[]            @relation("ServerOwner")
  animeList      UserAnimeList[]

  @@index([username])
  @@index([createdAt])
  @@map("profiles")
}

model AnimeSeries {
  id            String          @id @default(cuid())
  title         String
  titleEnglish  String?         @map("title_english")
  titleJapanese String?         @map("title_japanese")
  description   String?
  imageUrl      String?         @map("image_url")
  status        String          @default("ongoing")
  startYear     Int?            @map("start_year")
  endYear       Int?            @map("end_year")
  totalEpisodes Int?            @map("total_episodes")
  averageScore  Float?          @map("average_score")
  popularity    Int?
  isMainEntry   Boolean         @default(false) @map("is_main_entry")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @updatedAt @map("updated_at")
  activityLogs  ActivityLog[]
  animes        Anime[]
  userList      UserAnimeList[]

  @@index([title])
  @@index([status])
  @@index([startYear])
  @@map("anime_series")
}

model Anime {
  id                String               @id @default(cuid())
  malId             Int                  @unique @map("mal_id")
  title             String
  titleEnglish      String?              @map("title_english")
  titleJapanese     String?              @map("title_japanese")
  synopsis          String?
  status            String
  episodes          Int?
  duration          String?
  score             Float?
  rank              Int?
  popularity        Int?
  membersCount      Int?                 @map("members_count")
  favoritesCount    Int?                 @map("favorites_count")
  rating            String?
  type              String
  source            String?
  season            String?
  year              Int?
  airedFrom         DateTime?            @map("aired_from")
  airedTo           DateTime?            @map("aired_to")
  broadcastDay      String?              @map("broadcast_day")
  broadcastTime     String?              @map("broadcast_time")
  broadcastTimezone String?              @map("broadcast_timezone")
  imageUrl          String               @map("image_url")
  trailerUrl        String?              @map("trailer_url")
  createdAt         DateTime             @default(now()) @map("created_at")
  updatedAt         DateTime             @default(now()) @updatedAt @map("updated_at")
  seriesId          String?              @map("series_id")
  seriesOrder       Int?                 @map("series_order")
  seriesType        String?              @map("series_type")
  activityLogs      ActivityLog[]
  externalLinks     AnimeExternalLinks[]
  genres            AnimeGenres[]
  producers         AnimeProducers[]
  relations         AnimeRelations[]
  streaming         AnimeStreaming[]
  studios           AnimeStudios[]
  themes            AnimeThemes[]
  series            AnimeSeries?         @relation(fields: [seriesId], references: [id])
  serverPosts       ServerPost[]         @relation("ServerPostAnime")
  userList          UserAnimeList[]

  @@index([seriesId])
  @@index([seriesOrder])
  @@index([seriesType])
  @@map("animes")
}

model Genre {
  id        String        @id @default(cuid())
  malId     Int           @unique @map("mal_id")
  name      String
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")
  animes    AnimeGenres[]

  @@map("genres")
}

model Studio {
  id        String         @id @default(cuid())
  malId     Int            @unique @map("mal_id")
  name      String
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @default(now()) @updatedAt @map("updated_at")
  animes    AnimeStudios[]

  @@map("studios")
}

model Producer {
  id        String           @id @default(cuid())
  malId     Int              @unique @map("mal_id")
  name      String
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @default(now()) @updatedAt @map("updated_at")
  animes    AnimeProducers[]

  @@map("producers")
}

model AnimeGenres {
  animeId   String   @map("anime_id")
  genreId   String   @map("genre_id")
  createdAt DateTime @default(now()) @map("created_at")
  id        String   @id @default(cuid())
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  anime     Anime    @relation(fields: [animeId], references: [id], onDelete: Cascade)
  genre     Genre    @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@unique([animeId, genreId])
  @@map("anime_genres")
}

model AnimeStudios {
  animeId   String   @map("anime_id")
  studioId  String   @map("studio_id")
  createdAt DateTime @default(now()) @map("created_at")
  id        String   @id @default(cuid())
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  anime     Anime    @relation(fields: [animeId], references: [id], onDelete: Cascade)
  studio    Studio   @relation(fields: [studioId], references: [id], onDelete: Cascade)

  @@unique([animeId, studioId])
  @@map("anime_studios")
}

model AnimeProducers {
  animeId    String   @map("anime_id")
  producerId String   @map("producer_id")
  createdAt  DateTime @default(now()) @map("created_at")
  id         String   @id @default(cuid())
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  anime      Anime    @relation(fields: [animeId], references: [id], onDelete: Cascade)
  producer   Producer @relation(fields: [producerId], references: [id], onDelete: Cascade)

  @@unique([animeId, producerId])
  @@map("anime_producers")
}

model AnimeStreaming {
  id           String   @id @default(cuid())
  animeId      String   @map("anime_id")
  platformName String   @map("platform_name")
  url          String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
  anime        Anime    @relation(fields: [animeId], references: [id], onDelete: Cascade)

  @@map("anime_streaming")
}

model AnimeExternalLinks {
  id        String   @id @default(cuid())
  animeId   String   @map("anime_id")
  name      String
  url       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  anime     Anime    @relation(fields: [animeId], references: [id], onDelete: Cascade)

  @@map("anime_external_links")
}

model AnimeRelations {
  id           String   @id @default(cuid())
  animeId      String   @map("anime_id")
  relatedMalId Int      @map("related_mal_id")
  relationType String   @map("relation_type")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
  anime        Anime    @relation(fields: [animeId], references: [id], onDelete: Cascade)

  @@map("anime_relations")
}

model AnimeThemes {
  id        String   @id @default(cuid())
  animeId   String   @map("anime_id")
  type      String
  number    Int
  title     String
  artist    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  anime     Anime    @relation(fields: [animeId], references: [id], onDelete: Cascade)

  @@map("anime_themes")
}

model UserAnimeList {
  id            String       @id @default(cuid())
  profileId     String       @map("profile_id") @db.Uuid
  animeId       String?      @map("anime_id")
  status        String
  progress      Int          @default(0)
  score         Float?
  notes         String?
  isFavorite    Boolean      @default(false) @map("is_favorite")
  startDate     DateTime?    @map("start_date")
  finishDate    DateTime?    @map("finish_date")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @default(now()) @updatedAt @map("updated_at")
  seriesId      String?      @map("series_id")
  totalEpisodes Int?         @map("total_episodes")
  anime         Anime?       @relation(fields: [animeId], references: [id], onDelete: Cascade)
  profile       Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)
  series        AnimeSeries? @relation(fields: [seriesId], references: [id], onDelete: Cascade)

  @@unique([profileId, animeId])
  @@unique([profileId, seriesId])
  @@index([profileId])
  @@index([animeId])
  @@index([seriesId])
  @@map("user_anime_list")
}

model ActivityLog {
  id         String       @id @default(cuid())
  profileId  String       @map("profile_id") @db.Uuid
  actionType String       @map("action_type")
  animeId    String?      @map("anime_id")
  seriesId   String?      @map("series_id")
  oldValue   String?      @map("old_value")
  newValue   String?      @map("new_value")
  metadata   Json?
  createdAt  DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  anime      Anime?       @relation(fields: [animeId], references: [id], onDelete: Cascade)
  profile    Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)
  series     AnimeSeries? @relation(fields: [seriesId], references: [id], onDelete: Cascade)

  @@index([profileId, createdAt])
  @@index([actionType])
  @@index([animeId])
  @@index([seriesId])
  @@map("activity_logs")
}

model Server {
  id          String          @id @default(cuid())
  name        String
  description String?
  iconUrl     String?         @map("icon_url")
  inviteCode  String          @unique @map("invite_code")
  isPublic    Boolean         @default(true) @map("is_public")
  ownerId     String          @map("owner_id") @db.Uuid
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @default(now()) @updatedAt @map("updated_at")
  channels    ServerChannel[]
  members     ServerMember[]
  posts       ServerPost[]
  owner       Profile         @relation("ServerOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
  @@index([inviteCode])
  @@index([isPublic])
  @@map("servers")
}

model ServerMember {
  id        String   @id @default(cuid())
  serverId  String   @map("server_id")
  profileId String   @map("profile_id") @db.Uuid
  role      String   @default("member")
  joinedAt  DateTime @default(now()) @map("joined_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  profile   Profile  @relation("ServerMembership", fields: [profileId], references: [id], onDelete: Cascade)
  server    Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@unique([serverId, profileId])
  @@index([serverId])
  @@index([profileId])
  @@map("server_members")
}

model ServerChannel {
  id          String          @id @default(cuid())
  serverId    String          @map("server_id")
  name        String
  description String?
  type        String          @default("text")
  position    Int             @default(0)
  isPrivate   Boolean         @default(false) @map("is_private")
  parentId    String?         @map("parent_id")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @default(now()) @updatedAt @map("updated_at")
  parent      ServerChannel?  @relation("ChannelParent", fields: [parentId], references: [id])
  children    ServerChannel[] @relation("ChannelParent")
  server      Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages    ServerMessage[]
  posts       ServerPost[]

  @@index([serverId])
  @@index([parentId])
  @@index([type])
  @@map("server_channels")
}

model ServerPost {
  id        String           @id @default(cuid())
  serverId  String           @map("server_id")
  channelId String?          @map("channel_id")
  authorId  String           @map("author_id") @db.Uuid
  content   String
  title     String?          @map("title")
  imageUrl  String?          @map("image_url")
  animeId   String?          @map("anime_id")
  parentId  String?          @map("parent_id")
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @default(now()) @updatedAt @map("updated_at")
  likes     ServerPostLike[]
  anime     Anime?           @relation("ServerPostAnime", fields: [animeId], references: [id])
  author    Profile          @relation("ServerPostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  channel   ServerChannel?   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  parent    ServerPost?      @relation("PostReply", fields: [parentId], references: [id])
  replies   ServerPost[]     @relation("PostReply")
  server    Server           @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@index([serverId])
  @@index([channelId])
  @@index([authorId])
  @@index([animeId])
  @@index([parentId])
  @@index([createdAt])
  @@map("server_posts")
}

model ServerMessage {
  id        String              @id @default(cuid())
  channelId String              @map("channel_id")
  authorId  String              @map("author_id") @db.Uuid
  content   String
  createdAt DateTime            @default(now()) @map("created_at")
  updatedAt DateTime            @default(now()) @updatedAt @map("updated_at")
  parentId  String?             @map("parent_id")
  likes     ServerMessageLike[]
  author    Profile             @relation("ServerMessageAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  channel   ServerChannel       @relation(fields: [channelId], references: [id], onDelete: Cascade)
  parent    ServerMessage?      @relation("MessageReply", fields: [parentId], references: [id])
  replies   ServerMessage[]     @relation("MessageReply")

  @@index([channelId])
  @@index([authorId])
  @@index([parentId])
  @@index([createdAt])
  @@map("server_messages")
}

model ServerPostLike {
  id        String     @id @default(cuid())
  postId    String     @map("post_id")
  profileId String     @map("profile_id") @db.Uuid
  createdAt DateTime   @default(now()) @map("created_at")
  post      ServerPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  profile   Profile    @relation("ServerPostLikes", fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([postId, profileId])
  @@index([postId])
  @@index([profileId])
  @@map("server_post_likes")
}

model ServerMessageLike {
  id        String        @id @default(cuid())
  messageId String        @map("message_id")
  profileId String        @map("profile_id") @db.Uuid
  createdAt DateTime      @default(now()) @map("created_at")
  message   ServerMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  profile   Profile       @relation("ServerMessageLikes", fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([messageId, profileId])
  @@index([messageId])
  @@index([profileId])
  @@map("server_message_likes")
}
